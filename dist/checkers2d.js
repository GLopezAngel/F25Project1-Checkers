(()=>{"use strict";class e{constructor(){this.board=this.initializeBoard(),this.currentPlayer="red",this.selectedPiece=null,this.validMoves=[],this.mandatoryCaptures=this.getAllCaptureMoves()}initializeBoard(){const e=Array(8).fill(null).map(()=>Array(8).fill(null));for(let t=0;t<3;t++)for(let s=(t+1)%2;s<8;s+=2)e[t][s]={color:"black",isKing:!1};for(let t=5;t<8;t++)for(let s=(t+1)%2;s<8;s+=2)e[t][s]={color:"red",isKing:!1};return e}getAllCaptureMoves(){const e=[];for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=this.board[t][s];i&&i.color===this.currentPlayer&&this.getValidMoves(t,s).some(e=>2===Math.abs(e.row-t))&&e.push({row:t,col:s})}return e}selectPiece(e,t){const s=this.board[e][t];if(s&&s.color===this.currentPlayer){if(this.mandatoryCaptures.length>0&&!this.mandatoryCaptures.some(s=>s.row===e&&s.col===t))return console.log("Must select a piece that can capture!"),!1;this.selectedPiece={row:e,col:t},this.validMoves=this.getValidMoves(e,t);const s=this.validMoves.filter(t=>2===Math.abs(t.row-e));return s.length>0&&(this.validMoves=s),this.validMoves.length>0}return!1}deselectPiece(){this.selectedPiece=null,this.validMoves=[]}getValidMoves(e,t){const s=this.board[e][t];if(!s)return[];const i=s.isKing?[[1,1],[1,-1],[-1,1],[-1,-1]]:"red"===s.color?[[-1,1],[-1,-1]]:[[1,1],[1,-1]],o=[];for(const[r,l]of i){const i=e+r,a=t+l;this.isInBounds(i,a)&&!this.board[i][a]&&o.push({row:i,col:a});const c=e+2*r,n=t+2*l;this.isInBounds(c,n)&&this.board[i][a]&&this.board[i][a].color!==s.color&&!this.board[c][n]&&o.push({row:c,col:n})}return o}makeMove(e,t){if(!this.selectedPiece)return!1;const{row:s,col:i}=this.selectedPiece,o=this.board[s][i];if(!this.validMoves.some(s=>s.row===e&&s.col===t))return!1;this.board[e][t]=o,this.board[s][i]=null;const r=2===Math.abs(e-s);if(r){const o=(e+s)/2,r=(t+i)/2;this.board[o][r]=null}if(!o.isKing&&("red"===o.color&&0===e||"black"===o.color&&7===e)&&(o.isKing=!0),r){this.selectedPiece={row:e,col:t};const s=this.getValidMoves(e,t).filter(t=>2===Math.abs(t.row-e));if(s.length>0)return this.validMoves=s,!0}return this.currentPlayer="red"===this.currentPlayer?"black":"red",this.deselectPiece(),this.mandatoryCaptures=this.getAllCaptureMoves(),!0}isInBounds(e,t){return e>=0&&e<8&&t>=0&&t<8}resetGame(){this.board=this.initializeBoard(),this.currentPlayer="red",this.selectedPiece=null,this.validMoves=[],this.mandatoryCaptures=this.getAllCaptureMoves()}}function t(e,t){return e&&t&&e.row===t.row&&e.col===t.col}window.addEventListener("load",()=>{const s=new e,i=document.getElementById("gameBoard");function o(){const e=s.selectedPiece,o=s.validMoves;i.innerHTML="";for(let l=0;l<8;l++)for(let a=0;a<8;a++){const c=document.createElement("div");c.className="cell",c.classList.add((l+a)%2?"dark":"light"),t(e,{row:l,col:a})&&c.classList.add("selected"),o.some(e=>t(e,{row:l,col:a}))&&c.classList.add("valid-move");const n=s.board[l][a];if(n){const e=document.createElement("div");e.className=`piece ${n.color}`,n.isKing&&e.classList.add("king"),c.appendChild(e)}c.addEventListener("click",()=>r(l,a)),i.appendChild(c)}}function r(e,t){s.isGameOver||(s.selectPiece(e,t)||s.makeMove(e,t)||s.deselectPiece(),o())}document.getElementById("resetButton").addEventListener("click",()=>{s.resetGame(),o()}),o()})})();